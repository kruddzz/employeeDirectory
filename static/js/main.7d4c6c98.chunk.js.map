{"version":3,"sources":["utils/API.js","components/Search.js","components/DataArea.js","pages/Directory.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Search","props","className","onChange","handleInputChange","value","id","type","name","list","placeholder","DataArea","onClick","sortByName","results","map","result","src","picture","medium","alt","first","last","cell","href","email","format","dob","date","Directory","state","employees","order","filteredEmployees","search","filter","sorts","sort","a","b","setState","event","UserInput","target","employee","toLowerCase","indexOf","employeeSearch","API","then","res","data","catch","err","console","log","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7d4c6c98.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all users\r\n  getUsers: function() {\r\n\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};","import React from \"react\"\r\n\r\nfunction Search(props) {\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n\r\n\r\n            <header className=\"z-depth-3 col s12\" >\r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col s6\">\r\n\r\n\r\n\r\n                        <h3>Employee Directory</h3>\r\n\r\n                    </div>\r\n                    <div className=\"col s6 \">\r\n\r\n                        <div className=\"col s6\">\r\n\r\n                            <input\r\n                                onChange={props.handleInputChange}\r\n                                value={props.value}\r\n                                id=\"employees\"\r\n                                type=\"text\"\r\n                                name=\"search\"\r\n                                list=\"employee\"\r\n                                className=\" inputBox \"\r\n                                placeholder=\"Search by name\" />\r\n                        </div>\r\n                        <div className=\"col m4\">\r\n                            <button\r\n                                type=\"submit\"\r\n                                value=\"\"\r\n                                className=\" btn z-depth-2 waves-effect  searchBttn\"\r\n                                // onClick={props.handleSearch} \r\n                                >\r\n                                Search\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Search","\r\nimport React from \"react\";\r\nimport Moment from 'react-moment';\r\n\r\nfunction DataArea(props) {\r\n      return (\r\n        <table>\r\n                <tr>\r\n                    <th></th>\r\n                    <th onClick={props.sortByName}>Name</th>\r\n                    <th>Phone</th>\r\n                    <th>E-mail</th>\r\n                    <th>DOB</th>\r\n                </tr>\r\n\r\n            <tbody className= \"\">\r\n                {props.results.map(result => (\r\n                    <tr>\r\n                        <td> <img src={result.picture.medium} alt=\"\" /></td>\r\n                        <td>{result.name.first + \" \" + result.name.last}  </td>\r\n                        <td>{result.cell}</td>\r\n                        <td className=\"email\"><a href={result.email}>{result.email}</a></td>\r\n                        <td><Moment format=\"MM/DD/YYYY\">{result.dob.date}</Moment></td>\r\n\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table >\r\n    )\r\n\r\n}\r\n\r\nexport default DataArea","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Search from \"../components/Search\"\r\nimport DataArea from \"../components/DataArea\"\r\n\r\nclass Directory extends Component {\r\n    state ={\r\n        employees: [],\r\n        order: \"\",\r\n        filteredEmployees: [],\r\n        search: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.employeeSearch();\r\n    }\r\n    \r\n    sortByName = () => {\r\n        const filter = this.state.filteredEmployees;\r\n        if (this.state.order === \"asc\") {\r\n            const sorts = filter.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\r\n            // console.log(sorts)\r\n\r\n            this.setState({\r\n                filteredEmployees: sorts,\r\n                order: \"desc\"\r\n            })\r\n        } else {\r\n            const sorts = filter.sort((a, b) => (a.name.first > b.name.first) ? -1 : 1)\r\n            // console.log(sorts)\r\n\r\n            this.setState({\r\n                filteredEmployees: sorts,\r\n                order: \"asc\"\r\n            })\r\n        }\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        const employees = this.state.employees;\r\n        const UserInput = event.target.value;\r\n        const filteredEmployees = employees.filter(employee => \r\n            employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) > -1 ||\r\n            employee.name.last.toLowerCase().indexOf(UserInput.toLowerCase()) > -1 || \r\n            employee.email.toLowerCase().indexOf(UserInput.toLowerCase()) > -1\r\n        )\r\n        this.setState({\r\n            filteredEmployees,\r\n        });\r\n    };\r\n\r\n    employeeSearch = () => {\r\n        API.getUsers().then(res => this.setState({\r\n                filteredEmployees: res.data.results,\r\n                employees: res.data.results\r\n            })\r\n            )\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Search\r\n                    employee={this.state.employees}\r\n                    // handleSearch={this.handleSearch}\r\n                    handleInputChange={this.handleInputChange} />\r\n                <DataArea results={this.state.filteredEmployees}\r\n                    sortByName={this.sortByName}\r\n                />\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Directory;","import React from 'react';\nimport Directory from \"./pages/Directory\"\n\n\nfunction App() {\n  return (\n  \n    <Directory />\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}